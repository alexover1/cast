main :: () -> int {
    title := "Testing Application";
    background_color := RL_Color.{ 230, 41, 55, 255 };
    
    InitWindow(800, 600, title.data);
    SetTargetFPS(60);
    while !WindowShouldClose() {
        BeginDrawing();
        ClearBackground(background_color);
        EndDrawing();
    }
    return 0;
}

InitWindow :: (width: s32, height: s32, title: *u8) #foreign;
WindowShouldClose :: () -> bool #foreign;
CloseWindow :: () -> void #foreign;
IsWindowReady :: () -> bool #foreign;
IsWindowFullscreen :: () -> bool #foreign;
IsWindowHidden :: () -> bool #foreign;
IsWindowMinimized :: () -> bool #foreign;
IsWindowMaximized :: () -> bool #foreign;
IsWindowFocused :: () -> bool #foreign;
IsWindowResized :: () -> bool #foreign;
IsWindowState :: (flag: u32) -> bool #foreign;
SetWindowState :: (flags: u32) #foreign;
ClearWindowState :: (flags: u32) #foreign;
ToggleFullscreen :: () -> void #foreign;
MaximizeWindow :: () -> void #foreign;
MinimizeWindow :: () -> void #foreign;
RestoreWindow :: () -> void #foreign;
SetWindowIcon :: (image: RL_Image) #foreign;
SetWindowIcons :: (images: *RL_Image, count: s32) #foreign;
SetWindowTitle :: (title: *u8) #foreign;
SetWindowPosition :: (x: s32, y: s32) #foreign;
SetWindowMonitor :: (monitor: s32) #foreign;
SetWindowMinSize :: (width: s32, height: s32) #foreign;
SetWindowSize :: (width: s32, height: s32) #foreign;
SetWindowOpacity :: (opacity: float) #foreign;
GetWindowHandle :: () -> *void #foreign;
GetScreenWidth :: () -> s32 #foreign;
GetScreenHeight :: () -> s32 #foreign;
GetRenderWidth :: () -> s32 #foreign;
GetRenderHeight :: () -> s32 #foreign;
GetMonitorCount :: () -> s32 #foreign;
GetCurrentMonitor :: () -> s32 #foreign;
GetMonitorPosition :: (monitor: s32) -> RL_Vector2 #foreign;
GetMonitorWidth :: (monitor: s32) -> s32 #foreign;
GetMonitorHeight :: (monitor: s32) -> s32 #foreign;
GetMonitorPhysicalWidth :: (monitor: s32) -> s32 #foreign;
GetMonitorPhysicalHeight :: (monitor: s32) -> s32 #foreign;
GetMonitorRefreshRate :: (monitor: s32) -> s32 #foreign;
GetWindowPosition :: () -> RL_Vector2 #foreign;
GetWindowScaleDPI :: () -> RL_Vector2 #foreign;
GetMonitorName :: (monitor: s32) -> *u8 #foreign;
SetClipboardText :: (text: *u8) #foreign;
GetClipboardText :: () -> *u8 #foreign;
EnableEventWaiting :: () -> void #foreign;
DisableEventWaiting :: () -> void #foreign;

// Drawing-related functions
ClearBackground :: (color: RL_Color) #foreign;
BeginDrawing :: () -> void #foreign;
EndDrawing :: () -> void #foreign;
// BeginMode2D :: (camera: RL_Camera2D) #foreign;
EndMode2D :: () -> void #foreign;
// BeginMode3D :: (camera: RL_Camera3D) #foreign;
EndMode3D :: () -> void #foreign;
// BeginTextureMode :: (target: RL_RenderTexture2D) #foreign;
EndTextureMode :: () -> void #foreign;
// BeginShaderMode :: (shader: RL_Shader) #foreign;
EndShaderMode :: () -> void #foreign;
BeginBlendMode :: (mode: s32) #foreign;
EndBlendMode :: () -> void #foreign;
BeginScissorMode :: (x: s32, y: s32, width: s32, height: s32) #foreign;
EndScissorMode :: () -> void #foreign;
// BeginVrStereoMode :: (config: RL_VrStereoConfig) #foreign;
EndVrStereoMode :: () -> void #foreign;

RL_Vector2 :: struct {
    x: float;
    y: float;
}

RL_Vector3 :: struct {
    x: float;
    y: float;
    z: float;
}

RL_Vector4 :: struct {
    x: float;
    y: float;
    z: float;
    w: float;
}

RL_Quaternion :: RL_Vector4;

// Matrix, 4x4 components, column major, OpenGL style, right-handed
RL_Matrix :: struct {
    m0: float; m4: float; m8: float; m12: float;  // Matrix first row (4 components)
    m1: float; m5: float; m9: float; m13: float;  // Matrix second row (4 components)
    m2: float; m6: float; m10: float; m14: float; // Matrix third row (4 components)
    m3: float; m7: float; m11: float; m15: float; // Matrix fourth row (4 components)
}

// Color, 4 components, R8G8B8A8 (32bit)
RL_Color :: struct {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

// Rectangle, 4 components
RL_Rectangle :: struct {
    x: float;              // Rectangle top-left corner position x
    y: float;              // Rectangle top-left corner position y
    width: float;          // Rectangle width
    height: float;         // Rectangle height
}

// Image, pixel data stored in CPU memory (RAM)
RL_Image :: struct {
    data: *void;             // Image raw data
    width: s32;              // Image base width
    height: s32;             // Image base height
    mipmaps: s32;            // Mipmap levels, 1 by default
    format: s32;             // Data format (PixelFormat type)
}

// Texture, tex data stored in GPU memory (VRAM)
RL_Texture :: struct {
    id: u32;                 // OpenGL texture id
    width: s32;              // Texture base width
    height: s32;             // Texture base height
    mipmaps: s32;            // Mipmap levels, 1 by default
    format: s32;             // Data format (PixelFormat type)
}

RL_Texture2D :: RL_Texture;
RL_TextureCubemap :: RL_Texture;

// RenderTexture, fbo for texture rendering
RL_RenderTexture :: struct {
    id: u32;                 // OpenGL framebuffer object id
    texture: RL_Texture;     // Color buffer attachment texture
    depth: RL_Texture;       // Depth buffer attachment texture
}

RL_RenderTexture2D :: RL_RenderTexture;

SetTargetFPS :: (fps: s32) #foreign;
GetFPS :: () -> s32 #foreign;
GetFrameTime :: () -> float #foreign;
GetTime :: () -> float64 #foreign;



printf :: (format: *u8, ..) #foreign;
puts :: (s: *u8) -> int #foreign;
putchar :: (c: s32) -> int #foreign;
exit :: (status: s32) #foreign;

print_integer :: (x_: s32) {
    x := x_;
    if x > 9 {
        a := x / 10;
        x -= a * 10;
        print_integer(a);
    }
    putchar(x + "0");
}
