array_test :: () {
	printf("====================\n");

	array: [5] int;

	printf("The array at %p has %lld elements\n", *array, array.count);

	for 0..array.count-1 {
		array[it] = (it+1) * 3;
		printf("%p: %lld\n", *array[it], array[it]);
	}
}

slice_test :: () {
	printf("====================\n");

	array: [5] int;

	for 0..array.count-1 {
		array[it] = (it+1) * 3;
	}

	slice: [] int;
	slice.data = *array[0];
	slice.count = array.count;

	slice[2] = 10;

	for 0..array.count-1 {
		printf("%lld\n", slice[it]);
	}
	
	printf("The sum of the array is %lld\n", sum(slice));
}

main :: () -> int {
	array_test();
	slice_test();
	return 0;
}

sum :: (array: [] int) -> int {
	sum: int;
	for 0..array.count-1 {
		sum += array[it];
	}
	return sum;
}
print_binary :: (number: u64) {
	if number >> 1 {
		print_binary(number >> 1);
	}
	if number & 1  putchar("1")
	else           putchar("0");
}

printf :: (format: *u8, ..) #foreign;
putchar :: (char: u8) #foreign;

malloc :: (size: u64) -> *void #foreign;
free :: (pointer: *void) #foreign;
calloc :: (count: u64, member_size: u64) -> *void #foreign;
realloc :: (pointer: *void, new_size: u64) -> *void #foreign;