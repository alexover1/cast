// raylib v4.5 - A simple and easy-to-use library to enjoy videogames programming (www.raylib.com)

RL :: #system_library "libraylib.so";

RL_LIGHTGRAY  :: RL_Color.{ 200, 200, 200, 255 };
RL_GRAY       :: RL_Color.{ 130, 130, 130, 255 };
RL_DARKGRAY   :: RL_Color.{ 80, 80, 80, 255 };
RL_YELLOW     :: RL_Color.{ 253, 249, 0, 255 };
RL_GOLD       :: RL_Color.{ 255, 203, 0, 255 };
RL_ORANGE     :: RL_Color.{ 255, 161, 0, 255 };
RL_PINK       :: RL_Color.{ 255, 109, 194, 255 };
RL_RED        :: RL_Color.{ 230, 41, 55, 255 };
RL_MAROON     :: RL_Color.{ 190, 33, 55, 255 };
RL_GREEN      :: RL_Color.{ 0, 228, 48, 255 };
RL_LIME       :: RL_Color.{ 0, 158, 47, 255 };
RL_DARKGREEN  :: RL_Color.{ 0, 117, 44, 255 };
RL_SKYBLUE    :: RL_Color.{ 102, 191, 255, 255 };
RL_BLUE       :: RL_Color.{ 0, 121, 241, 255 };
RL_DARKBLUE   :: RL_Color.{ 0, 82, 172, 255 };
RL_PURPLE     :: RL_Color.{ 200, 122, 255, 255 };
RL_VIOLET     :: RL_Color.{ 135, 60, 190, 255 };
RL_DARKPURPLE :: RL_Color.{ 112, 31, 126, 255 };
RL_BEIGE      :: RL_Color.{ 211, 176, 131, 255 };
RL_BROWN      :: RL_Color.{ 127, 106, 79, 255 };
RL_DARKBROWN  :: RL_Color.{ 76, 63, 47, 255 };

RL_WHITE      :: RL_Color.{ 255, 255, 255, 255 };
RL_BLACK      :: RL_Color.{ 0, 0, 0, 255 };
RL_BLANK      :: RL_Color.{ 0, 0, 0, 0 };
RL_MAGENTA    :: RL_Color.{ 255, 0, 255, 255 };
RL_RAYWHITE   :: RL_Color.{ 245, 245, 245, 255 };

RL_Vector2 :: struct {
    x: float;
    y: float;
}

RL_Vector3 :: struct {
    x: float;
    y: float;
    z: float;
}

RL_Vector4 :: struct {
    x: float;
    y: float;
    z: float;
    w: float;
}

RL_Quaternion :: RL_Vector4;

// Matrix, 4x4 components, column major, OpenGL style, right-handed
RL_Matrix :: struct {
    m0: float; m4: float; m8: float; m12: float;  // Matrix first row (4 components)
    m1: float; m5: float; m9: float; m13: float;  // Matrix second row (4 components)
    m2: float; m6: float; m10: float; m14: float; // Matrix third row (4 components)
    m3: float; m7: float; m11: float; m15: float; // Matrix fourth row (4 components)
}

// Color, 4 components, R8G8B8A8 (32bit)
RL_Color :: struct {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

// Rectangle, 4 components
RL_Rectangle :: struct {
    x: float;              // Rectangle top-left corner position x
    y: float;              // Rectangle top-left corner position y
    width: float;          // Rectangle width
    height: float;         // Rectangle height
}

// Image, pixel data stored in CPU memory (RAM)
RL_Image :: struct {
    data: *void;             // Image raw data
    width: s32;              // Image base width
    height: s32;             // Image base height
    mipmaps: s32;            // Mipmap levels, 1 by default
    format: s32;             // Data format (PixelFormat type)
}

// Texture, tex data stored in GPU memory (VRAM)
RL_Texture :: struct {
    id: u32;                 // OpenGL texture id
    width: s32;              // Texture base width
    height: s32;             // Texture base height
    mipmaps: s32;            // Mipmap levels, 1 by default
    format: s32;             // Data format (PixelFormat type)
}

RL_Texture2D :: RL_Texture;
RL_TextureCubemap :: RL_Texture;

// RenderTexture, fbo for texture rendering
RL_RenderTexture :: struct {
    id: u32;                 // OpenGL framebuffer object id
    texture: RL_Texture;     // Color buffer attachment texture
    depth: RL_Texture;       // Depth buffer attachment texture
}

RL_RenderTexture2D :: RL_RenderTexture;

// Window-related functions
InitWindow :: (width: s32, height: s32, title: *u8) #foreign RL;
WindowShouldClose :: () -> bool #foreign RL;
CloseWindow :: () -> void #foreign RL;
IsWindowReady :: () -> bool #foreign RL;
IsWindowFullscreen :: () -> bool #foreign RL;
IsWindowHidden :: () -> bool #foreign RL;
IsWindowMinimized :: () -> bool #foreign RL;
IsWindowMaximized :: () -> bool #foreign RL;
IsWindowFocused :: () -> bool #foreign RL;
IsWindowResized :: () -> bool #foreign RL;
IsWindowState :: (flag: u32) -> bool #foreign RL;
SetWindowState :: (flags: u32) #foreign RL;
ClearWindowState :: (flags: u32) #foreign RL;
ToggleFullscreen :: () -> void #foreign RL;
MaximizeWindow :: () -> void #foreign RL;
MinimizeWindow :: () -> void #foreign RL;
RestoreWindow :: () -> void #foreign RL;
SetWindowIcon :: (image: RL_Image) #foreign RL;
SetWindowIcons :: (images: *RL_Image, count: s32) #foreign RL;
SetWindowTitle :: (title: *u8) #foreign RL;
SetWindowPosition :: (x: s32, y: s32) #foreign RL;
SetWindowMonitor :: (monitor: s32) #foreign RL;
SetWindowMinSize :: (width: s32, height: s32) #foreign RL;
SetWindowSize :: (width: s32, height: s32) #foreign RL;
SetWindowOpacity :: (opacity: float) #foreign RL;
GetWindowHandle :: () -> *void #foreign RL;
GetScreenWidth :: () -> s32 #foreign RL;
GetScreenHeight :: () -> s32 #foreign RL;
GetRenderWidth :: () -> s32 #foreign RL;
GetRenderHeight :: () -> s32 #foreign RL;
GetMonitorCount :: () -> s32 #foreign RL;
GetCurrentMonitor :: () -> s32 #foreign RL;
GetMonitorPosition :: (monitor: s32) -> RL_Vector2 #foreign RL;
GetMonitorWidth :: (monitor: s32) -> s32 #foreign RL;
GetMonitorHeight :: (monitor: s32) -> s32 #foreign RL;
GetMonitorPhysicalWidth :: (monitor: s32) -> s32 #foreign RL;
GetMonitorPhysicalHeight :: (monitor: s32) -> s32 #foreign RL;
GetMonitorRefreshRate :: (monitor: s32) -> s32 #foreign RL;
GetWindowPosition :: () -> RL_Vector2 #foreign RL;
GetWindowScaleDPI :: () -> RL_Vector2 #foreign RL;
GetMonitorName :: (monitor: s32) -> *u8 #foreign RL;
SetClipboardText :: (text: *u8) #foreign RL;
GetClipboardText :: () -> *u8 #foreign RL;
EnableEventWaiting :: () -> void #foreign RL;
DisableEventWaiting :: () -> void #foreign RL;

// Drawing-related functions
ClearBackground :: (color: RL_Color) #foreign RL;
BeginDrawing :: () -> void #foreign RL;
EndDrawing :: () -> void #foreign RL;
// BeginMode2D :: (camera: RL_Camera2D) #foreign RL;
EndMode2D :: () -> void #foreign RL;
// BeginMode3D :: (camera: RL_Camera3D) #foreign RL;
EndMode3D :: () -> void #foreign RL;
// BeginTextureMode :: (target: RL_RenderTexture2D) #foreign RL;
EndTextureMode :: () -> void #foreign RL;
// BeginShaderMode :: (shader: RL_Shader) #foreign RL;
EndShaderMode :: () -> void #foreign RL;
BeginBlendMode :: (mode: s32) #foreign RL;
EndBlendMode :: () -> void #foreign RL;
BeginScissorMode :: (x: s32, y: s32, width: s32, height: s32) #foreign RL;
EndScissorMode :: () -> void #foreign RL;
// BeginVrStereoMode :: (config: RL_VrStereoConfig) #foreign RL;
EndVrStereoMode :: () -> void #foreign RL;

// Timing-related functions
SetTargetFPS :: (fps: s32) #foreign RL;
GetFPS :: () -> s32 #foreign RL;
GetFrameTime :: () -> float #foreign RL;
GetTime :: () -> float64 #foreign RL;

// Basic shapes drawing functions
DrawRectangle :: (posX: s32, posY: s32, width: s32, height: s32, color: RL_Color) #foreign RL;
